using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using Xamarin.Forms;

namespace AlienScale.Views.CustomControls
{
    public class ImageButton : Image
    {
        public static readonly BindableProperty CommandProperty =
            BindableProperty.Create("Command", typeof(ICommand), typeof(ImageButton), null);

        public static readonly BindableProperty CommandParameterProperty =
            BindableProperty.Create("CommandParameter", typeof(object), typeof(ImageButton), null);

        #region IsVisibleProperty
        public static readonly BindableProperty IsButtonVisibleProperty =
            BindableProperty.Create("IsButtonVisible", typeof(bool), typeof(ImageButton), false, BindingMode.TwoWay, null, OnVisibilityChanged);

        public bool IsButtonVisible
        {
            get
            {
                return (bool)GetValue(IsButtonVisibleProperty);
            }
            set
            {
                SetValue(IsButtonVisibleProperty, value);
            }
        }

        private static void OnVisibilityChanged(object sender, object oldValue, object newValue)
        {
            ImageButton imgBtn = (ImageButton)sender;
            if ((bool)newValue)
                imgBtn.InitializeButton();
            else
                imgBtn.IsVisible = false;
        }

        #endregion
        public event EventHandler ItemTapped = (e, a) => { };
        public event EventHandler ItemSwapped = (e, a) => { };

        public ImageButton()
        {
            Initialize();
            this.IsVisible = false;
        }

        public ICommand Command
        {
            get { return (ICommand)GetValue(CommandProperty); }
            set { SetValue(CommandProperty, value); }
        }

        public object CommandParameter
        {
            get { return GetValue(CommandParameterProperty); }
            set { SetValue(CommandParameterProperty, value); }
        }

        public ICommand TransitionCommand
        {
            get
            {
                return new Command(async () =>
                {
                    AnchorX = 0.48;
                    AnchorY = 0.48;
                    await this.ScaleTo(1.2, 50, Easing.Linear);
                    await Task.Delay(100);
                    await this.ScaleTo(1, 50, Easing.Linear);

                    Device.BeginInvokeOnMainThread(() =>
                    {
                        AnimateButtonIn();
                    });

                    this.IsVisible = false;
                    InitializeButton();

                    Command?.Execute(CommandParameter);
                    ItemTapped(this, EventArgs.Empty);
                });
            }
        }
        
        public void Initialize()
        {
            GestureRecognizers.Add(new SwipeGestureRecognizer
            {
                Direction = SwipeDirection.Up,
                Command = TransitionCommand
            });
        }

        private void InitializeButton()
        {
            Task.Delay(200).ContinueWith(t =>
            {
                Device.BeginInvokeOnMainThread(() =>
                {
                    this.TranslationY = this.Height;
                    this.IsVisible = true;
                    this.TranslationX = (Width / 2) - this.Height/2;
                    this.TranslateTo(0, -(this.Height/6), 450).ContinueWith(w =>
                    {
                        this.ScaleTo(1.4, 300, Easing.Linear).ContinueWith(y =>
                        {
                            this.ScaleTo(1.0, 200, Easing.Linear).ContinueWith(k =>
                            {
                                Task.Delay(300).ContinueWith(z =>
                                {
                                    Device.BeginInvokeOnMainThread(() =>
                                    {
                                        AnimateButtonOut();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }

        private Task AnimateButtonIn()
        {
            return this.TranslateTo(0, 0, 150);
        }

        private Task AnimateButtonOut()
        {
            var y = (3*this.Height)/4;
            var x = 0;
            return this.TranslateTo(x, y, 250);
        }
    }
}
